{
  "name": "canela-measurement",
  "version": "1.0.0",
  "homepage": "https://beambott.github.io/canela-measurement",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
 






import React, { useState } from "react";

const initialDogInfo = {
  breed: "",
  sex: "",
  age: "",
  weight: "",
  ownerName: "",
};

const initialMeasurements = {
  frontLeg: {
    bottomView: { calibration: "", length: "", width: "" },
    sideView: { calibration: "", height: "" },
  },
  rearLeg: {
    bottomView: { calibration: "", length: "", width: "" },
    sideView: { calibration: "", height: "" },
  },
};

export default function App() {
  const [step, setStep] = useState("dogInfo"); // dogInfo, frontBottom, frontBottomConfirm, frontSide, frontSideConfirm, rearBottom, rearBottomConfirm, rearSide, rearSideConfirm, summary, final
  const [dogInfo, setDogInfo] = useState(initialDogInfo);
  const [measurements, setMeasurements] = useState(initialMeasurements);

  // Handlers for dog info
  function handleDogInfoChange(e) {
    const { name, value } = e.target;
    setDogInfo((prev) => ({ ...prev, [name]: value }));
  }

  function dogInfoValid() {
    return (
      dogInfo.breed.trim() &&
      dogInfo.sex.trim() &&
      dogInfo.age.trim() &&
      dogInfo.weight.trim() &&
      dogInfo.ownerName.trim()
    );
  }

  // Handlers for measurement inputs
  function handleMeasurementChange(leg, view, field, value) {
    setMeasurements((prev) => ({
      ...prev,
      [leg]: {
        ...prev[leg],
        [view]: {
          ...prev[leg][view],
          [field]: value,
        },
      },
    }));
  }

  function measurementViewValid(leg, view) {
    const m = measurements[leg][view];
    // All fields must be non-empty and numeric (calibration can be float)
    if (
      m.calibration.trim() === "" ||
      isNaN(Number(m.calibration)) ||
      (view === "bottomView" &&
        (m.length.trim() === "" ||
          isNaN(Number(m.length)) ||
          m.width.trim() === "" ||
          isNaN(Number(m.width)))) ||
      (view === "sideView" &&
        (m.height.trim() === "" || isNaN(Number(m.height))))
    ) {
      return false;
    }
    return true;
  }

  // Confirmation screens just show entered data and ask for confirm or back

  // Summary screen shows all measurements and dog info for final confirm or restart

  // Restart resets all state and returns to dog info

  function restart() {
    setDogInfo(initialDogInfo);
    setMeasurements(initialMeasurements);
    setStep("dogInfo");
  }

  return (
    <div style={{ maxWidth: 600, margin: "auto", padding: 20, fontFamily: "Arial, sans-serif" }}>
      <h1>Dog Paw Measurement App</h1>

      {step === "dogInfo" && (
        <>
          <h2>Enter Dog Information</h2>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              if (dogInfoValid()) setStep("frontBottom");
            }}
          >
            <label>
              Breed:
              <input
                type="text"
                name="breed"
                value={dogInfo.breed}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <label>
              Sex:
              <select name="sex" value={dogInfo.sex} onChange={handleDogInfoChange} required>
                <option value="">Select</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
              </select>
            </label>
            <br />
            <label>
              Age (years):
              <input
                type="number"
                min="0"
                step="0.1"
                name="age"
                value={dogInfo.age}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <label>
              Weight (kg):
              <input
                type="number"
                min="0"
                step="0.1"
                name="weight"
                value={dogInfo.weight}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <label>
              Owner's Name:
              <input
                type="text"
                name="ownerName"
                value={dogInfo.ownerName}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <button type="submit" disabled={!dogInfoValid()}>
              Next: Front Leg Bottom View
            </button>
          </form>
        </>
      )}

      {(step === "frontBottom" || step === "frontBottomConfirm") && (
        <>
          <h2>Front Leg - Bottom View Measurement</h2>
          {step === "frontBottom" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.bottomView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "bottomView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Length (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.bottomView.length}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "bottomView", "length", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Width (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.bottomView.width}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "bottomView", "width", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("frontLeg", "bottomView")}
                onClick={() => setStep("frontBottomConfirm")}
              >
                Confirm Bottom View
              </button>
            </>
          )}
          {step === "frontBottomConfirm" && (
            <>
              <p>
                Calibration: {measurements.frontLeg.bottomView.calibration} cm
                <br />
                Length: {measurements.frontLeg.bottomView.length} cm
                <br />
                Width: {measurements.frontLeg.bottomView.width} cm
              </p>
              <button onClick={() => setStep("frontBottom")}>Back</button>{" "}
              <button onClick={() => setStep("frontSide")}>Next: Front Leg Side View</button>
            </>
          )}
        </>
      )}

      {(step === "frontSide" || step === "frontSideConfirm") && (
        <>
          <h2>Front Leg - Side View Measurement</h2>
          {step === "frontSide" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.sideView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "sideView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Height (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.sideView.height}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "sideView", "height", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("frontLeg", "sideView")}
                onClick={() => setStep("frontSideConfirm")}
              >
                Confirm Side View
              </button>
            </>
          )}
          {step === "frontSideConfirm" && (
            <>
              <p>
                Calibration: {measurements.frontLeg.sideView.calibration} cm
                <br />
                Height: {measurements.frontLeg.sideView.height} cm
              </p>
              <button onClick={() => setStep("frontSide")}>Back</button>{" "}
              <button onClick={() => setStep("rearBottom")}>Next: Rear Leg Bottom View</button>
            </>
          )}
        </>
      )}

      {(step === "rearBottom" || step === "rearBottomConfirm") && (
        <>
          <h2>Rear Leg - Bottom View Measurement</h2>
          {step === "rearBottom" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.bottomView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "bottomView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Length (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.bottomView.length}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "bottomView", "length", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Width (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.bottomView.width}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "bottomView", "width", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("rearLeg", "bottomView")}
                onClick={() => setStep("rearBottomConfirm")}
              >
                Confirm Bottom View
              </button>
            </>
          )}
          {step === "rearBottomConfirm" && (
            <>
              <p>
                Calibration: {measurements.rearLeg.bottomView.calibration} cm
                <br />
                Length: {measurements.rearLeg.bottomView.length} cm
                <br />
                Width: {measurements.rearLeg.bottomView.width} cm
              </p>
              <button onClick={() => setStep("rearBottom")}>Back</button>{" "}
              <button onClick={() => setStep("rearSide")}>Next: Rear Leg Side View</button>
            </>
          )}
        </>
      )}

      {(step === "rearSide" || step === "rearSideConfirm") && (
        <>
          <h2>Rear Leg - Side View Measurement</h2>
          {step === "rearSide" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.sideView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "sideView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Height (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.sideView.height}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "sideView", "height", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("rearLeg", "sideView")}
                onClick={() => setStep("rearSideConfirm")}
              >
                Confirm Side View
              </button>
            </>
          )}
          {step === "rearSideConfirm" && (
            <>
              <p>
                Calibration: {measurements.rearLeg.sideView.calibration} cm
                <br />
                Height: {measurements.rearLeg.sideView.height} cm
              </p>
              <button onClick={() => setStep("rearSide")}>Back</button>{" "}
              <button onClick={() => setStep("summary")}>Next: Summary</button>
            </>
          )}
        </>
      )}

      {step === "summary" && (
        <>
          <h2>Measurement Summary</h2>
          <h3>Dog Information</h3>
          <p>
            Breed: {dogInfo.breed}
            <br />
            Sex: {dogInfo.sex}
            <br />
            Age: {dogInfo.age} years
            <br />
            Weight: {dogInfo.weight} kg
            <br />
            Owner's Name: {dogInfo.ownerName}
          </p>

          <h3>Front Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.frontLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.frontLeg.bottomView.length} cm
            <br />
            Width: {measurements.frontLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.frontLeg.sideView.calibration} cm
            <br />
            Height: {measurements.frontLeg.sideView.height} cm
          </p>

          <h3>Rear Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.rearLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.rearLeg.bottomView.length} cm
            <br />
            Width: {measurements.rearLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.rearLeg.sideView.calibration} cm
            <br />
            Height: {measurements.rearLeg.sideView.height} cm
          </p>

          <button onClick={() => setStep("rearSide")}>Back</button>{" "}
          <button onClick={() => setStep("final")}>Confirm and Finish</button>
        </>
      )}

      {step === "final" && (
        <>
          <h2>Final Measurements</h2>
          <h3>Dog Information</h3>
          <p>
            Breed: {dogInfo.breed}
            <br />
            Sex: {dogInfo.sex}
            <br />
            Age: {dogInfo.age} years
            <br />
            Weight: {dogInfo.weight} kg
            <br />
            Owner's Name: {dogInfo.ownerName}
          </p>

          <h3>Front Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.frontLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.frontLeg.bottomView.length} cm
            <br />
            Width: {measurements.frontLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.frontLeg.sideView.calibration} cm
            <br />
            Height: {measurements.frontLeg.sideView.height} cm
          </p>

          <h3>Rear Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.rearLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.rearLeg.bottomView.length} cm
            <br />
            Width: {measurements.rearLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.rearLeg.sideView.calibration} cm
            <br />
            Height: {measurements.rearLeg.sideView.height} cm
          </p>

          <button onClick={restart}>Restart Measurement</button>
        </>
      )}
    </div>
  );
}
import React, { useState } from "react";

const initialDogInfo = {
  breed: "",
  sex: "",
  age: "",
  weight: "",
  ownerName: "",
};

const initialMeasurements = {
  frontLeg: {
    bottomView: { calibration: "", length: "", width: "" },
    sideView: { calibration: "", height: "" },
  },
  rearLeg: {
    bottomView: { calibration: "", length: "", width: "" },
    sideView: { calibration: "", height: "" },
  },
};

export default function App() {
  const [step, setStep] = useState("dogInfo"); // dogInfo, frontBottom, frontBottomConfirm, frontSide, frontSideConfirm, rearBottom, rearBottomConfirm, rearSide, rearSideConfirm, summary, final
  const [dogInfo, setDogInfo] = useState(initialDogInfo);
  const [measurements, setMeasurements] = useState(initialMeasurements);

  // Handlers for dog info
  function handleDogInfoChange(e) {
    const { name, value } = e.target;
    setDogInfo((prev) => ({ ...prev, [name]: value }));
  }

  function dogInfoValid() {
    return (
      dogInfo.breed.trim() &&
      dogInfo.sex.trim() &&
      dogInfo.age.trim() &&
      dogInfo.weight.trim() &&
      dogInfo.ownerName.trim()
    );
  }

  // Handlers for measurement inputs
  function handleMeasurementChange(leg, view, field, value) {
    setMeasurements((prev) => ({
      ...prev,
      [leg]: {
        ...prev[leg],
        [view]: {
          ...prev[leg][view],
          [field]: value,
        },
      },
    }));
  }

  function measurementViewValid(leg, view) {
    const m = measurements[leg][view];
    // All fields must be non-empty and numeric (calibration can be float)
    if (
      m.calibration.trim() === "" ||
      isNaN(Number(m.calibration)) ||
      (view === "bottomView" &&
        (m.length.trim() === "" ||
          isNaN(Number(m.length)) ||
          m.width.trim() === "" ||
          isNaN(Number(m.width)))) ||
      (view === "sideView" &&
        (m.height.trim() === "" || isNaN(Number(m.height))))
    ) {
      return false;
    }
    return true;
  }

  // Restart resets all state and returns to dog info
  function restart() {
    setDogInfo(initialDogInfo);
    setMeasurements(initialMeasurements);
    setStep("dogInfo");
  }

  return (
    <div style={{ maxWidth: 600, margin: "auto", padding: 20, fontFamily: "Arial, sans-serif" }}>
      <h1>Dog Paw Measurement App</h1>

      {step === "dogInfo" && (
        <>
          <h2>Enter Dog Information</h2>
          <form
            onSubmit={(e) => {
              e.preventDefault();
              if (dogInfoValid()) setStep("frontBottom");
            }}
          >
            <label>
              Breed:
              <input
                type="text"
                name="breed"
                value={dogInfo.breed}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <label>
              Sex:
              <select name="sex" value={dogInfo.sex} onChange={handleDogInfoChange} required>
                <option value="">Select</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
              </select>
            </label>
            <br />
            <label>
              Age (years):
              <input
                type="number"
                min="0"
                step="0.1"
                name="age"
                value={dogInfo.age}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <label>
              Weight (kg):
              <input
                type="number"
                min="0"
                step="0.1"
                name="weight"
                value={dogInfo.weight}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <label>
              Owner's Name:
              <input
                type="text"
                name="ownerName"
                value={dogInfo.ownerName}
                onChange={handleDogInfoChange}
                required
              />
            </label>
            <br />
            <button type="submit" disabled={!dogInfoValid()}>
              Next: Front Leg Bottom View
            </button>
          </form>
        </>
      )}

      {(step === "frontBottom" || step === "frontBottomConfirm") && (
        <>
          <h2>Front Leg - Bottom View Measurement</h2>
          {step === "frontBottom" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.bottomView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "bottomView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Length (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.bottomView.length}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "bottomView", "length", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Width (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.bottomView.width}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "bottomView", "width", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("frontLeg", "bottomView")}
                onClick={() => setStep("frontBottomConfirm")}
              >
                Confirm Bottom View
              </button>
            </>
          )}
          {step === "frontBottomConfirm" && (
            <>
              <p>
                Calibration: {measurements.frontLeg.bottomView.calibration} cm
                <br />
                Length: {measurements.frontLeg.bottomView.length} cm
                <br />
                Width: {measurements.frontLeg.bottomView.width} cm
              </p>
              <button onClick={() => setStep("frontBottom")}>Back</button>{" "}
              <button onClick={() => setStep("frontSide")}>Next: Front Leg Side View</button>
            </>
          )}
        </>
      )}

      {(step === "frontSide" || step === "frontSideConfirm") && (
        <>
          <h2>Front Leg - Side View Measurement</h2>
          {step === "frontSide" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.sideView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "sideView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Height (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.frontLeg.sideView.height}
                  onChange={(e) =>
                    handleMeasurementChange("frontLeg", "sideView", "height", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("frontLeg", "sideView")}
                onClick={() => setStep("frontSideConfirm")}
              >
                Confirm Side View
              </button>
            </>
          )}
          {step === "frontSideConfirm" && (
            <>
              <p>
                Calibration: {measurements.frontLeg.sideView.calibration} cm
                <br />
                Height: {measurements.frontLeg.sideView.height} cm
              </p>
              <button onClick={() => setStep("frontSide")}>Back</button>{" "}
              <button onClick={() => setStep("rearBottom")}>Next: Rear Leg Bottom View</button>
            </>
          )}
        </>
      )}

      {(step === "rearBottom" || step === "rearBottomConfirm") && (
        <>
          <h2>Rear Leg - Bottom View Measurement</h2>
          {step === "rearBottom" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.bottomView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "bottomView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Length (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.bottomView.length}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "bottomView", "length", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Width (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.bottomView.width}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "bottomView", "width", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("rearLeg", "bottomView")}
                onClick={() => setStep("rearBottomConfirm")}
              >
                Confirm Bottom View
              </button>
            </>
          )}
          {step === "rearBottomConfirm" && (
            <>
              <p>
                Calibration: {measurements.rearLeg.bottomView.calibration} cm
                <br />
                Length: {measurements.rearLeg.bottomView.length} cm
                <br />
                Width: {measurements.rearLeg.bottomView.width} cm
              </p>
              <button onClick={() => setStep("rearBottom")}>Back</button>{" "}
              <button onClick={() => setStep("rearSide")}>Next: Rear Leg Side View</button>
            </>
          )}
        </>
      )}

      {(step === "rearSide" || step === "rearSideConfirm") && (
        <>
          <h2>Rear Leg - Side View Measurement</h2>
          {step === "rearSide" && (
            <>
              <label>
                Calibration (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.sideView.calibration}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "sideView", "calibration", e.target.value)
                  }
                />
              </label>
              <br />
              <label>
                Height (cm):
                <input
                  type="number"
                  min="0"
                  step="0.01"
                  value={measurements.rearLeg.sideView.height}
                  onChange={(e) =>
                    handleMeasurementChange("rearLeg", "sideView", "height", e.target.value)
                  }
                />
              </label>
              <br />
              <button
                disabled={!measurementViewValid("rearLeg", "sideView")}
                onClick={() => setStep("rearSideConfirm")}
              >
                Confirm Side View
              </button>
            </>
          )}
          {step === "rearSideConfirm" && (
            <>
              <p>
                Calibration: {measurements.rearLeg.sideView.calibration} cm
                <br />
                Height: {measurements.rearLeg.sideView.height} cm
              </p>
              <button onClick={() => setStep("rearSide")}>Back</button>{" "}
              <button onClick={() => setStep("summary")}>Next: Summary</button>
            </>
          )}
        </>
      )}

      {step === "summary" && (
        <>
          <h2>Measurement Summary</h2>
          <h3>Dog Information</h3>
          <p>
            Breed: {dogInfo.breed}
            <br />
            Sex: {dogInfo.sex}
            <br />
            Age: {dogInfo.age} years
            <br />
            Weight: {dogInfo.weight} kg
            <br />
            Owner's Name: {dogInfo.ownerName}
          </p>

          <h3>Front Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.frontLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.frontLeg.bottomView.length} cm
            <br />
            Width: {measurements.frontLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.frontLeg.sideView.calibration} cm
            <br />
            Height: {measurements.frontLeg.sideView.height} cm
          </p>

          <h3>Rear Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.rearLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.rearLeg.bottomView.length} cm
            <br />
            Width: {measurements.rearLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.rearLeg.sideView.calibration} cm
            <br />
            Height: {measurements.rearLeg.sideView.height} cm
          </p>

          <button onClick={() => setStep("rearSide")}>Back</button>{" "}
          <button onClick={() => setStep("final")}>Confirm and Finish</button>
        </>
      )}

      {step === "final" && (
        <>
          <h2>Final Measurements</h2>
          <h3>Dog Information</h3>
          <p>
            Breed: {dogInfo.breed}
            <br />
            Sex: {dogInfo.sex}
            <br />
            Age: {dogInfo.age} years
            <br />
            Weight: {dogInfo.weight} kg
            <br />
            Owner's Name: {dogInfo.ownerName}
          </p>

          <h3>Front Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.frontLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.frontLeg.bottomView.length} cm
            <br />
            Width: {measurements.frontLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.frontLeg.sideView.calibration} cm
            <br />
            Height: {measurements.frontLeg.sideView.height} cm
          </p>

          <h3>Rear Leg</h3>
          <p>
            Bottom View:
            <br />
            Calibration: {measurements.rearLeg.bottomView.calibration} cm
            <br />
            Length: {measurements.rearLeg.bottomView.length} cm
            <br />
            Width: {measurements.rearLeg.bottomView.width} cm
            <br />
            Side View:
            <br />
            Calibration: {measurements.rearLeg.sideView.calibration} cm
            <br />
            Height: {measurements.rearLeg.sideView.height} cm
          </p>

          <button onClick={restart}>Restart Measurement</button>
        </>
      )}
    </div>
  );
}
{
  "name": "paw-measurement",
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.0.0",
    "vite": "^4.4.9"
  }
}